S -> STATEMENT_FUNCTION_LIST

//////////////////////////////////////////////////////////////////////////////
// STATEMENTS

STATEMENT_FUNCTION_LIST -> STATEMENT STATEMENT_FUNCTION_LIST' | FUNCTION STATEMENT_FUNCTION_LIST'

STATEMENT_FUNCTION_LIST' -> STATEMENT_FUNCTION_LIST | epsilon

STATEMENT -> VARIABLE_DECLARATION | IF_STATEMENT | WHILE_STATEMENT | IDENTIFIER_ACCESS

IF_STATEMENT -> if CONDITION { STATEMENT_LIST } IF_STATEMENTp

IF_STATEMENTp -> else { STATEMENT_LIST } | epsilon

WHILE_STATEMENT -> while CONDITION { STATEMENT_LIST }

STATEMENT_LIST -> STATEMENT STATEMENT_LIST | epsilon

//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// FUNCTIONS

FUNCTION -> function fName( FUNCTION_DECLARATION_PARAMETERS ) : TYPE FUNCTION'

FUNCTION' -> { FUNCTION_STATEMENT_LIST } | ;

FUNCTION_STATEMENT_LIST -> FUNCTION_STATEMENT FUNCTION_STATEMENT_LIST | epsilon

FUNCTION_STATEMENT -> VARIABLE_DECLARATION | VARIABLE_ASSIGNMENT | IF_STATEMENT | WHILE_STATEMENT | RETURN VALUE ;

FUNCTION_DECLARATION_PARAMETERS -> FUNCTION_DECLARATION_PARAMETER_LIST | epsilon

FUNCTION_DECLARATION_PARAMETER_LIST -> FUNCTION_PARAMETER FUNCTION_DECLARATION_PARAMETER_LIST'

FUNCTION_DECLARATION_PARAMETER_LIST' -> , FUNCTION_DECLARATION_PARAMETER_LIST | epsilon

FUNCTION_PARAMETER -> VDECLARATION valName : TYPE

FUNCTION_CALL -> ( FUNCTION_PARAMETER_LIST ) FUNCTION_CALL' 

FUNCTION_PARAMETER_LIST -> VALUE FUNCTION_PARAMETER_LIST | epsilon

FUNCTION_PARAMETER_LIST' -> , FUNCTION_PARAMETER_LIST | epsilon

//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// VARIABLES

VARIABLE_DECLARATION -> VDECLARATION valName : TYPE := VALUE;

VARIABLE_ASSIGNMENT -> := VALUE;

IDENTIFIER_ACCESS -> valName IDENTIFIER_ACCESS'

IDENTIFIER_ACCESS' -> VARIABLE_ASSIGNMENT | PROCEDURE_CALL

PROCEDURE_CALL -> ( FUNCTION_PARAMETER_LIST );
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// OPERANDS

CONDITION -> MULT

MULT -> ADDITIVE MULT_SYMBOL ADDITIVE | ADDITIVE

ADDITIVE -> RELATIONAL ADDICTION_SYMBOL RELATIONAL | RELATIONAL

RELATIONAL -> EQUALITY RELATIONAL_SYMBOL EQUALITY | EQUALITY

EQUALITY -> NEG EQUALITY_SYMBOL NEG | NEG

NEG -> !AND | AND

AND  -> OR && OR | OR

OR -> TERMINAL || TERMINAL | TERMINAL

TERMINAL -> VALUE

//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// MATH CALCULATIONS for arrays (because functions arent allowed when indexing)

ARRAY_MATH_CALC -> ARRAY_MINUS

ARRAY_MINUS -> ARRAY_MINUS - ARRAY_SUM | ARRAY_SUM

ARRAY_SUM -> ARRAY_SUM + ARRAY_REST | ARRAY_REST

ARRAY_REST -> ARRAY_REST % ARRAY_DIVISION | ARRAY_DIVISION

ARRAY_DIVISION -> ARRAY_DIVISION / ARRAY_MULTIPLICATION | ARRAY_MULTIPLICATION

ARRAY_MULTIPLICATION -> ARRAY_MULTIPLICATION * ARRAY_TERMINAL | ARRAY_TERMINAL

ARRAY_TERMINAL -> Num | VARIABLE_ACCESS

//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// ACCESSES

IDENTIFIER_ACCESS -> vName IDENTIFIER_ACCESS'

IDENTIFIER_ACCESS' -> ARRAY_ACCESS | epsilon

ARRAY_ACCESS -> [ VALUE ] ARRAY_ACCESS'

ARRAY_ACCESS' -> ARRAY_ACCESS | epsilon

//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// VALUES

VALUE -> vValue CONDITION' MATH_CALC | ARRAY CONDITION' MATH_CALC | IDENTIFIER_ACCESS FUNCTION_CALL VALUE' CONDITION' MATH_CALC

VALUE' -> ARRAY_ACCESS CONDITION' MATH_CALC | epsilon

ARRAY -> [ ARRAY_CONTENT ]

ARRAY_CONTENT -> VALUE_LIST | epsilon

VALUE_LIST -> vValue VALUE_LIST' | ARRAY VALUE_LIST''

VALUE_LIST' -> , VALUE_LIST | epsilon

VALUE_LIST'' -> , ARRAY_CONTENT | epsilon

CONDITION' -> CONDITION | epsilon

MATH_CALC -> ADDICTIVE | epsilon

//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// SYMBOLS AND TYPES

EQUALITY_SYMBOL -> = | !=

RELATIONAL_SYMBOL -> >= | > | <= | <

ADDICTION_SYMBOL -> + | -

MULT_SYMBOL -> * | / | %

VDECLARATION -> var | val

TYPE -> double | int | string | void | [TYPE]

//////////////////////////////////////////////////////////////////////////////
